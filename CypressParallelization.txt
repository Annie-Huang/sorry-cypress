Up to Parallelization process


https://docs.cypress.io/guides/guides/parallelization.html#Overview


https://github.com/cypress-io/cypress-documentation/issues/206
https://hub.docker.com/r/cypress/base
https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/util/ci_provider.js
https://docs.cypress.io/guides/references/changelog.html#3-8-3
https://docs.cypress.io/guides/guides/command-line.html#Commands
https://docs.cypress.io/guides/dashboard/projects.html#Setup
https://docs.cypress.io/guides/guides/command-line.html#cypress-run

https://github.com/cypress-io/cypress/issues/2520	-- Parallel tests without recording on dashboard
https://www.cypress.io/pricing/

https://testdriven.io/blog/running-cypress-tests-in-parallel/		-- without dashboard
https://www.youtube.com/watch?v=0eSET5MdcYs
https://github.com/testdrivenio/cypress-parallel			-- sample code of above.
https://github.com/agoldis/sorry-cypress
https://docs.knapsackpro.com/2019/cypress-parallel-testing-with-jenkins-pipeline-stages
https://github.com/SgSridhar/cypress-docker-parallel-tests/blob/master/package.json#L25

https://github.com/puppeteer/puppeteer

https://watirmelon.blog/2019/07/06/my-thoughts-on-cypress-io/
https://www.reddit.com/r/javascript/comments/97hktn/how_many_of_you_use_cypress/

https://github.com/agoldis/sorry-cypress/issues/6
https://hub.docker.com/u/agoldis
https://sorry-cypress-demo.herokuapp.com/
https://github.com/cypress-io/cypress/issues/4876

###############################################################################################################

Try on sorry-cypress/example/
================================
C:\react\sorry-cypress\example>npm install

Window: Update the following:
C:\Users\Annie\AppData\Local\Cypress\Cache\3.8.3\Cypress\resources\app\packages\server\config\app.yml

Command: cypress run --parallel --record --key xxx --ci-build-id <buildId>

Window Result:
C:\react\sorry-cypress\example>npx cypress run --record --key whatever --parallel --ci-build-id local-01
<<< Doesn't seem to work, Nothing shows in terminal and nothing in http://localhost:1234/. Maybe only work in linux machine??


Mac: Update the following:
ip-10-101-36-114:lodgement-ui anniehuang$ DEBUG=cypress:* cypress version
  cypress:cli cli starts with arguments ["/Users/anniehuang/.nvm/versions/node/v12.13.1/bin/node","/Users/anniehuang/projects/lodgement-ui/node_modules/.bin/cypress","version"] +0ms
  cypress:cli NODE_OPTIONS is not set +0ms
  cypress:cli printing Cypress version +2ms
  cypress:cli Reading binary package.json from: /Users/anniehuang/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/package.json +0ms
Cypress package version: 3.4.1
Cypress binary version: 3.4.1

   /Users/agoldis/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/package.json
   /Users/agoldis/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/
   /Users/agoldis/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/packages/server/config/app.yml

/Users/anniehuang/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/package.json
/Users/anniehuang/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/packages/server/config/app.yml

Mac Result 1:
192-168-1-106:example anniehuang$ pwd
/Users/anniehuang/projects/sorry-cypress/example
192-168-1-106:example anniehuang$ npx cypress run --record --key whatever --parallel --ci-build-id local-01
Recording this run failed because the request was invalid.
Request should follow postRunRequest@2.2.0 schema
Errors:
[
  "data.recordKey must be uuid format"
]
<<<< I think it errors out because I am supposed to run in lodgement-UI?

Mac Result 2:
Try this in lodgement-ui:
Find a random e2e app:
192-168-1-106:upsert-e2e anniehuang$ pwd
/Users/anniehuang/projects/lodgement-ui/apps/upsert-e2e

192-168-1-106:upsert-e2e anniehuang$ npx cypress run --record --key whatever --parallel --ci-build-id local-01
HostIframe plugin enabled, running in host: false
You passed the --record flag but this project has not been setup to record.

This project is missing the 'projectId' inside of 'cypress.json'.

We cannot uniquely identify this project without this id.

You need to setup this project to record. This will generate a unique 'projectId'.

Alternatively if you omit the --record flag this project will run without recording.
---------






Try on sorry-cypress - Run the demo locally
================================================
192-168-1-106:sorry-cypress anniehuang$ pwd
/Users/anniehuang/projects/sorry-cypress

192-168-1-106:sorry-cypress anniehuang$ docker-compose -f docker-compose.full.yml up
<<< is supposed download three docker files list in https://hub.docker.com/u/agoldis ???

http://localhost:8080/
<<< has the same header ('All Runs') as the https://sorry-cypress-demo.herokuapp.com/

Reconfigurate:
Reconfigure Cypress to use api_url: "http://localhost:1234/",
/Users/anniehuang/Library/Caches/Cypress/3.4.1/Cypress.app/Contents/Resources/app/packages/server/config/app.yml

In /Users/anniehuang/projects/lodgement-ui/apps/upsert-e2e/cypress.json
Add:
  "projectId": "myProject",

In lodgement-ui: have two terminals to run the following.
npm run start:host
npm run start:upsert:host

Then:
192-168-1-106:upsert-e2e anniehuang$ pwd
/Users/anniehuang/projects/lodgement-ui/apps/upsert-e2e

192-168-1-106:upsert-e2e anniehuang$ npx cypress run --record --key whatever --parallel --ci-build-id local-01

The terminal that run "docker-compose -f docker-compose.full.yml up" (in sorry-cypress) seems to log something
The terminal that run "npx cypress run --record --key whatever --parallel --ci-build-id local-01" seems failed for all test cases.


You will need to setup S3 to be able to upload failed test screenshots. Replace the credentials in docker-compose.full.yml after you've set up S3 bucket.

Question:
- How to install this thing. It's not in npmjs. So we just clone and fork the repo to follow the instruction to set up the server??
-






The repository consists of 3 packages - you can deploy them on your own infrastructure:
-------------------------------------------------------------------------------------------
192-168-1-106:director anniehuang$ pwd
/Users/anniehuang/projects/sorry-cypress/packages/director

192-168-1-106:director anniehuang$ npm install
192-168-1-106:director anniehuang$ npm run build
192-168-1-106:director anniehuang$ npm run start












Gold:
==========
- Set up sorry-cypress.
- If successful set up sorry-cypress, we need to create a doco to reverse this this sequential run if anything wrong with setting.


Turning on parallelization
=================================
1.Refer to your CI providerâ€™s documentation on how to set up multiple machines to run in your CI environment.		<<< We are already doing that for lib unit testing.
2.
cypress run --record --key=abc123 --parallel

Running tests in parallel requires the --record flag be passed. This ensures Cypress can properly collect the data needed to parallelize future runs. 	<<< I don't understand why we need to record it it if we want to run in parallel??

Commands: cypress run
---------------------
--record	Whether to record the test run


https://docs.cypress.io/guides/guides/command-line.html#cypress-run
-----------------------------------------------------------------------------
cypress run --record --key <record-key>
Record video of tests running after setting up your project to record. After setting up your project you will be given a Record Key.
cypress run --record --key


setting up your project to record.
------------------------------------------
https://docs.cypress.io/guides/dashboard/projects.html#Setup
Click on the Runs tab of your project within the Test Runner.
Click Set up Project to Record.
You will need to log in to record your tests, so you will need to log in to the Cypress Dashboard here.		<< Can we just paid for Cypress Dashboard: Josh said we can..

Balance strategy
--------------------
Cypress will automatically balance your spec files across the available machines in your CI provider.
Cypress calculates which spec file to run based on the data collected from previous runs. This ensures that your spec files run as fast as possible, with no need for manual configuration.

Duration estimation is done separately for every browser the spec file was tested against.
There is extra time in the run for each spec: starting the browser, encoding and uploading the video to the dashboard, requesting the next spec to run.


Grouping test runs
-------------------------
cypress run --group <name>
cypress run --group develop-env
cypress run --group admin-tests --spec 'cypress/integration/admin/**/*'		You can add multiple groups to the same run by passing a different name. This can help distinguish groups of specs from each other.
cypress run --group user-tests --spec 'cypress/integration/user/**/*'
(Specifying the --ci-build-id may also be necessary.)

For multiple runs to be grouped into a single run, it is required for CI machines to share a common CI build ID environment variable.
Typically these CI machines will run in parallel or within the same build workflow or pipeline, but it is not required to use Cypress parallelization to group runs.
Grouping of runs can be utilized independently of Cypress parallelization.


cypress run --record --group Windows/Chrome-69 --browser chrome
cypress run --record --group Mac/Chrome-70 --browser chrome
cypress run --record --group Linux/Electron

cypress run --record --group 1x-electron
cypress run --record --group 2x-chrome --browser chrome --parallel
cypress run --record --group 4x-electron --parallel

cypress run --record --group package/admin --spec 'cypress/integration/packages/admin/**/*'
cypress run --record --group package/customer --spec 'cypress/integration/packages/customer/**/*'
cypress run --record --group package/guest --spec 'cypress/integration/packages/guest/**/*'

cypress run --record --parallel --ci-build-id $BUILD_TAG




https://watirmelon.blog/2019/07/06/my-thoughts-on-cypress-io/
=====================================================================
I agree with some points, but the part of running Cypress tests in parallel can be easily solved by defining different test scripts, that run specific test suites in separate Docker containers, for instance.
I have just experimented running Cypress tests in parallel on GitLab successfully.
See https://gitlab.com/wlsf82/learning-vuejs/pipelines/76641974
and https://gitlab.com/wlsf82/learning-vuejs/commit/8245dcb0e261eb53c492da340214360afd8b3cf7


Grouping by browser
=================================
cypress run --record --group Windows/Chrome-69 --browser chrome
cypress run --record --group Mac/Chrome-70 --browser chrome
cypress run --record --group Linux/Electron


glob pattern:
=================================
cypress run --spec cypress/integration/*_mocked_spec
cypress run --spec cypress/**/*.smoke.*
<< match user-list.smoke.js
         user-update.stubbed.js


setting Docker in Bamboo and added following in Docker File. Worked for me!
===================================================================================================
RUN apt-get install --assume-yes --no-install-recommends \ xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
docker image available with all cypress dependencies already installed: https://hub.docker.com/r/cypress/base



https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/util/ci_provider.js
===================================================================================================
const isBamboo = () => {
  return process.env.bamboo_buildNumber
}
const CI_PROVIDERS = {
  'bamboo': isBamboo,
  'bitbucket': 'BITBUCKET_BUILD_NUMBER',
  'buildkite': 'BUILDKITE',
  'circle': 'CIRCLECI',
  ...
}
const _providerCiParams = () => {
  return {
    ...
    bamboo: extract([
      'bamboo_buildNumber',
      'bamboo_buildResultsUrl',
      'bamboo_planRepository_repositoryUrl',
      'bamboo_buildKey',
    ]),
   ...
  }
}
const _providerCommitParams = () => {
  const { env } = process

  return {
    ...
    bamboo: {
      sha: env.bamboo_planRepository_revision,
      branch: env.bamboo_planRepository_branch,
      // message: ???
      authorName: env.bamboo_planRepository_username,
      // authorEmail: ???
      remoteOrigin: env.bamboo_planRepository_repositoryURL,
      // defaultBranch: ???
    },
    ...
  }
}


https://docs.cypress.io/guides/references/changelog.html#3-8-3
=======================================================================
We now collect more environment variables for Bamboo CI when recording for the Dashboard. Addresses #4895.


Linking CI machines for parallelization or grouping
=======================================================================
A CI build ID is used to associate multiple CI machines to one test run.
This identifier is based on environment variables that are unique to each CI build, and vary based on CI provider.
Cypress has out-of-the-box support for most of the commonly-used CI providers, so you would typically not need to directly set the CI build ID via the --ci-build-id flag.

CI Build ID environment variables by provider
Bamboo	bamboo_buildNumber

You can pass a different value to link agents to the same run.
For example, if you are using Jenkins and think the environment variable BUILD_TAG is more unique than the environment variable BUILD_NUMBER,
pass the BUILD_TAG value via CLI --ci-build-id flag.
"cypress run --record --parallel --ci-build-id $BUILD_TAG"











